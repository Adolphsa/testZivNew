package com.yeejay.yplay.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_INFO".
*/
public class MyInfoDao extends AbstractDao<MyInfo, Long> {

    public static final String TABLENAME = "MY_INFO";

    /**
     * Properties of entity MyInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uin = new Property(1, int.class, "uin", false, "UIN");
        public final static Property IsNoMoreShow = new Property(2, int.class, "isNoMoreShow", false, "IS_NO_MORE_SHOW");
        public final static Property IsNoMoreShow2 = new Property(3, int.class, "isNoMoreShow2", false, "IS_NO_MORE_SHOW2");
        public final static Property IsShowInviteDialogInfo = new Property(4, int.class, "isShowInviteDialogInfo", false, "IS_SHOW_INVITE_DIALOG_INFO");
        public final static Property AddFriendNum = new Property(5, int.class, "addFriendNum", false, "ADD_FRIEND_NUM");
        public final static Property IsInviteTipShow = new Property(6, int.class, "isInviteTipShow", false, "IS_INVITE_TIP_SHOW");
    }


    public MyInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MyInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UIN\" INTEGER NOT NULL ," + // 1: uin
                "\"IS_NO_MORE_SHOW\" INTEGER NOT NULL ," + // 2: isNoMoreShow
                "\"IS_NO_MORE_SHOW2\" INTEGER NOT NULL ," + // 3: isNoMoreShow2
                "\"IS_SHOW_INVITE_DIALOG_INFO\" INTEGER NOT NULL ," + // 4: isShowInviteDialogInfo
                "\"ADD_FRIEND_NUM\" INTEGER NOT NULL ," + // 5: addFriendNum
                "\"IS_INVITE_TIP_SHOW\" INTEGER NOT NULL );"); // 6: isInviteTipShow
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUin());
        stmt.bindLong(3, entity.getIsNoMoreShow());
        stmt.bindLong(4, entity.getIsNoMoreShow2());
        stmt.bindLong(5, entity.getIsShowInviteDialogInfo());
        stmt.bindLong(6, entity.getAddFriendNum());
        stmt.bindLong(7, entity.getIsInviteTipShow());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUin());
        stmt.bindLong(3, entity.getIsNoMoreShow());
        stmt.bindLong(4, entity.getIsNoMoreShow2());
        stmt.bindLong(5, entity.getIsShowInviteDialogInfo());
        stmt.bindLong(6, entity.getAddFriendNum());
        stmt.bindLong(7, entity.getIsInviteTipShow());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyInfo readEntity(Cursor cursor, int offset) {
        MyInfo entity = new MyInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // uin
            cursor.getInt(offset + 2), // isNoMoreShow
            cursor.getInt(offset + 3), // isNoMoreShow2
            cursor.getInt(offset + 4), // isShowInviteDialogInfo
            cursor.getInt(offset + 5), // addFriendNum
            cursor.getInt(offset + 6) // isInviteTipShow
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUin(cursor.getInt(offset + 1));
        entity.setIsNoMoreShow(cursor.getInt(offset + 2));
        entity.setIsNoMoreShow2(cursor.getInt(offset + 3));
        entity.setIsShowInviteDialogInfo(cursor.getInt(offset + 4));
        entity.setAddFriendNum(cursor.getInt(offset + 5));
        entity.setIsInviteTipShow(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
